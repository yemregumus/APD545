In this workshop, I got hands-on experience creating a Java program for a musical instrument shop. It was challenging but rewarding. I learned to use interfaces and abstract classes to design a clean and organized structure for different instrument families. The Model-View-Presenter (MVP) pattern helped in separating concerns, making the code modular.

The user input part was interesting; taking prices for instruments and using them to create objects dynamically. Comparing instruments by price and displaying relevant information showcased the power of Java features like Comparable.

Implementing the Comparable interface and sorting instruments in descending order was a bit tricky, but I grasped it. The use of arrays to hold instrument objects, along with dynamic sorting, demonstrated a practical application of programming skills.

The MVC design pattern made the code more understandable. The Scanner class simplified user interactions, and proper comments and naming conventions enhanced readability. Testing the application with different prices ensured its robustness.

Overall, this workshop deepened my understanding of Java, object-oriented design, and MVC architecture. It was a satisfying journey from creating abstract classes to a fully functional musical instrument program.